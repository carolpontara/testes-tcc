# -*- coding: utf-8 -*-
"""TCC.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oVeD82K_x6WZ8JfMPzukZ38pjEcFhko3

# Código Port Scanner com Sniffer Simples

# Prompt Utilizado:
Olá! Crie para mim um código em Python que auxilie um aluno do curso de Segurança da Informação a criar um codigo que simule um aplicativo utilizado no curso o Port scanner, porém adicione a ele um sniffer simples e também portas para serem escaneadas na rede.
"""

!pip install scapy

import socket
import threading
from scapy.all import *

# Função para o scanner de portas
def port_scanner(target, ports):
    try:
        ip = socket.gethostbyname(target)
    except socket.gaierror:
        print("Hostname could not be resolved.")
        return

    print(f"Scanning target: {target} ({ip})")

    for port in ports:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(1)

        result = sock.connect_ex((ip, port))
        if result == 0:
            print(f"Port {port} is open")
        sock.close()

# Função para o sniffer
def packet_sniffer(packet):
    if IP in packet:
        src_ip = packet[IP].src
        dst_ip = packet[IP].dst

        print(f"[*] {src_ip} -> {dst_ip} : {packet.summary()}")

# Função para iniciar o sniffer
def start_sniffer():
    print("Starting sniffer...")
    sniff(prn=packet_sniffer, store=0)

# Função principal
def main():
    target = input("Enter the target IP address or hostname: ")

    # Defina a faixa de portas a serem escaneadas
    ports = range(1, 1025)

    # Inicie a thread para o scanner de portas
    port_scan_thread = threading.Thread(target=port_scanner, args=(target, ports))
    port_scan_thread.start()

    # Inicie a thread para o sniffer
    sniffer_thread = threading.Thread(target=start_sniffer)
    sniffer_thread.start()

if __name__ == "__main__":
    main()

"""# Analisador de Pacotes Python

# Prompt Utilizado

Olá ! Faça para mim um código python que simule a ferramenta Wire Shark , sou estudante da Fatec e g
"""

import socket
import struct
import textwrap

def main():
    conn = socket.socket(socket.AF_PACKET, socket.SOCK_RAW, socket.ntohs(3))

    while True:
        raw_data, addr = conn.recvfrom(65536)
        dest_mac, src_mac, eth_proto, data = ethernet_frame(raw_data)
        print('\nEthernet Frame:')
        print('Destination: {}, Source: {}, Protocol: {}'.format(dest_mac, src_mac, eth_proto))

def ethernet_frame(data):
    dest_mac, src_mac, proto = struct.unpack('! 6s 6s H', data[:14])
    return get_mac_addr(dest_mac), get_mac_addr(src_mac), socket.htons(proto), data[14:]

def get_mac_addr(bytes_addr):
    bytes_str = map('{:02x}'.format, bytes_addr)
    return ':'.join(bytes_str).upper()

main()

"""# Prompts com melhores resultados

# Scanner de Portas Python

Olá sou aluna do curso de Segurança da Informação, gostaria de um código em Python que simule uma ferramenta de gerenciamento de redes o Port Scanner.
"""

import socket

def scanner_de_portas(ip_alvo, portas):
    print(f"Iniciando varredura em {ip_alvo}")
    for porta in portas:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(1)
        resultado = sock.connect_ex((ip_alvo, porta))
        if resultado == 0:
            print(f"Porta {porta}: Aberta")
        else:
            print(f"Porta {porta}: Fechada")
        sock.close()

if __name__ == "__main__":
    ip_alvo = input("Digite o IP alvo: ")
    portas = [int(p) for p in input("Digite as portas a serem verificadas (separadas por vírgula): ").split(",")]
    scanner_de_portas(ip_alvo, portas)

"""


```

# Sniffer em Python"""

import socket
import struct
import textwrap

def desempacotar_ethernet(frame):
    dest_mac, src_mac, proto = struct.unpack('! 6s 6s H', frame[:14])
    return get_mac_address(dest_mac), get_mac_address(src_mac), socket.htons(proto), frame[14:]

def get_mac_address(mac_bytes):
    mac = map('{:02x}'.format, mac_bytes)
    return ':'.join(mac).upper()

def desempacotar_ipv4(packet):
    version_header_length = packet[0]
    version = version_header_length >> 4
    header_length = (version_header_length & 15) * 4
    ttl, proto, src, target = struct.unpack('! 8x B B 2x 4s 4s', packet[:20])
    return version, header_length, ttl, proto, ipv4(src), ipv4(target), packet[header_length:]

def ipv4(endereco):
    return '.'.join(map(str, endereco))

def desempacotar_tcp(segmento):
    src_port, dest_port, sequence, acknowledgment, offset_reserved_flags = struct.unpack('! H H L L H', segmento[:14])
    offset = (offset_reserved_flags >> 12) * 4
    flags = offset_reserved_flags & 0x1FF
    return src_port, dest_port, sequence, acknowledgment, offset, flags, segmento[offset:]

def sniffer(rede, interface):
    sock = socket.socket(socket.AF_PACKET, socket.SOCK_RAW, socket.ntohs(3))
    sock.bind((rede, 0))
    sock.setsockopt(socket.IPPROTO_IP, socket.IP_HDRINCL, 1)
    sock.ioctl(socket.SIO_RCVALL, socket.RCVALL_ON)
    try:
        while True:
            raw_data, addr = sock.recvfrom(65535)
            dest_mac, src_mac, eth_proto, data = desempacotar_ethernet(raw_data)
            print('\nEthernet Frame:')
            print('Destino: {}, Origem: {}, Protocolo: {}'.format(dest_mac, src_mac, eth_proto))

            if eth_proto == 8:
                version, header_length, ttl, proto, src, target, data = desempacotar_ipv4(data)
                print('Protocolo IPv4:')
                print('Versão: {}, Comprimento do cabeçalho: {}, TTL: {}'.format(version, header_length, ttl))
                print('Protocolo: {}, Origem: {}, Destino: {}'.format(proto, src, target))

                if proto == 6:
                    src_port, dest_port, sequence, acknowledgment, offset, flags, data = desempacotar_tcp(data)
                    print('Protocolo TCP:')
                    print('Porta de Origem: {}, Porta de Destino: {}'.format(src_port, dest_port))
                    print('Sequência: {}, Acknowledgment: {}'.format(sequence, acknowledgment))
                    print('Flags:')
                    print('URG: {}, ACK: {}, PSH: {}, RST: {}, SYN: {}, FIN: {}'.format((flags & 32)>>5, (flags & 16)>>4, (flags & 8)>>3, (flags & 4)>>2, (flags & 2)>>1, flags & 1))
    except KeyboardInterrupt:
        print("Encerrando o sniffer.")
        sock.ioctl(socket.SIO_RCVALL, socket.RCVALL_OFF)

if __name__ == "__main__":
    rede = input("Digite o endereço da rede a ser monitorada (por exemplo, '192.168.0.0'): ")
    interface = input("Digite o nome da interface de rede (por exemplo, 'eth0'): ")
    sniffer(rede, interface)